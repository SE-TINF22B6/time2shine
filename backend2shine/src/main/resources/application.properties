## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

# Database Connection:

spring.datasource.url=jdbc:postgresql://164.92.224.126:5432/accounts
spring.datasource.username=postgres
spring.jpa.show-sql=true

# Setting the Tomcat server port:
server.port=8081

# The password in the following line is commented out because it is automatically added by GitHub Actions.
# If you want to run the application locally, uncomment the line and add the password. But DO NOT commit the password to GitHub!!!

#spring.datasource.password=


# logging
logging.level.org.springframework.security=INFO
logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n


spring.security.oauth2.client.provider.external.issuer-uri=http://t2s.maiwald.cc:8080/realms/external

spring.security.oauth2.client.registration.external.provider=external
spring.security.oauth2.client.registration.external.client-name=external-client
spring.security.oauth2.client.registration.external.client-id=external-client

# Achtung, PW in Klartext! Muss für prod geändert werden!
spring.security.oauth2.client.registration.external.client-secret=r0qae8GrBwJdIzCFdH9E3Jho2kmnL5B2 
spring.security.oauth2.client.registration.external.scope=openid,offline_access,profile
spring.security.oauth2.client.registration.external.authorization-grant-type=authorization_code
